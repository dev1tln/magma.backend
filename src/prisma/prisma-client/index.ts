// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  detention: (where?: DetentionWhereInput) => Promise<boolean>;
  inventaire: (where?: InventaireWhereInput) => Promise<boolean>;
  unite: (where?: UniteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => ArticleNullablePromise;
  articles: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Article>;
  articlesConnection: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleConnectionPromise;
  detention: (where: DetentionWhereUniqueInput) => DetentionNullablePromise;
  detentions: (args?: {
    where?: DetentionWhereInput;
    orderBy?: DetentionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Detention>;
  detentionsConnection: (args?: {
    where?: DetentionWhereInput;
    orderBy?: DetentionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DetentionConnectionPromise;
  inventaire: (where: InventaireWhereUniqueInput) => InventaireNullablePromise;
  inventaires: (args?: {
    where?: InventaireWhereInput;
    orderBy?: InventaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Inventaire>;
  inventairesConnection: (args?: {
    where?: InventaireWhereInput;
    orderBy?: InventaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InventaireConnectionPromise;
  unite: (where: UniteWhereUniqueInput) => UniteNullablePromise;
  unites: (args?: {
    where?: UniteWhereInput;
    orderBy?: UniteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Unite>;
  unitesConnection: (args?: {
    where?: UniteWhereInput;
    orderBy?: UniteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UniteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => ArticlePromise;
  updateArticle: (args: {
    data: ArticleUpdateInput;
    where: ArticleWhereUniqueInput;
  }) => ArticlePromise;
  updateManyArticles: (args: {
    data: ArticleUpdateManyMutationInput;
    where?: ArticleWhereInput;
  }) => BatchPayloadPromise;
  upsertArticle: (args: {
    where: ArticleWhereUniqueInput;
    create: ArticleCreateInput;
    update: ArticleUpdateInput;
  }) => ArticlePromise;
  deleteArticle: (where: ArticleWhereUniqueInput) => ArticlePromise;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayloadPromise;
  createDetention: (data: DetentionCreateInput) => DetentionPromise;
  updateDetention: (args: {
    data: DetentionUpdateInput;
    where: DetentionWhereUniqueInput;
  }) => DetentionPromise;
  updateManyDetentions: (args: {
    data: DetentionUpdateManyMutationInput;
    where?: DetentionWhereInput;
  }) => BatchPayloadPromise;
  upsertDetention: (args: {
    where: DetentionWhereUniqueInput;
    create: DetentionCreateInput;
    update: DetentionUpdateInput;
  }) => DetentionPromise;
  deleteDetention: (where: DetentionWhereUniqueInput) => DetentionPromise;
  deleteManyDetentions: (where?: DetentionWhereInput) => BatchPayloadPromise;
  createInventaire: (data: InventaireCreateInput) => InventairePromise;
  updateInventaire: (args: {
    data: InventaireUpdateInput;
    where: InventaireWhereUniqueInput;
  }) => InventairePromise;
  updateManyInventaires: (args: {
    data: InventaireUpdateManyMutationInput;
    where?: InventaireWhereInput;
  }) => BatchPayloadPromise;
  upsertInventaire: (args: {
    where: InventaireWhereUniqueInput;
    create: InventaireCreateInput;
    update: InventaireUpdateInput;
  }) => InventairePromise;
  deleteInventaire: (where: InventaireWhereUniqueInput) => InventairePromise;
  deleteManyInventaires: (where?: InventaireWhereInput) => BatchPayloadPromise;
  createUnite: (data: UniteCreateInput) => UnitePromise;
  updateUnite: (args: {
    data: UniteUpdateInput;
    where: UniteWhereUniqueInput;
  }) => UnitePromise;
  updateManyUnites: (args: {
    data: UniteUpdateManyMutationInput;
    where?: UniteWhereInput;
  }) => BatchPayloadPromise;
  upsertUnite: (args: {
    where: UniteWhereUniqueInput;
    create: UniteCreateInput;
    update: UniteUpdateInput;
  }) => UnitePromise;
  deleteUnite: (where: UniteWhereUniqueInput) => UnitePromise;
  deleteManyUnites: (where?: UniteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  detention: (
    where?: DetentionSubscriptionWhereInput
  ) => DetentionSubscriptionPayloadSubscription;
  inventaire: (
    where?: InventaireSubscriptionWhereInput
  ) => InventaireSubscriptionPayloadSubscription;
  unite: (
    where?: UniteSubscriptionWhereInput
  ) => UniteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "UTI" | "DET";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dtecre_ASC"
  | "dtecre_DESC"
  | "identifiant_ASC"
  | "identifiant_DESC"
  | "password_ASC"
  | "password_DESC"
  | "nom_ASC"
  | "nom_DESC"
  | "prenom_ASC"
  | "prenom_DESC"
  | "role_ASC"
  | "role_DESC";

export type UniteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cdeunt_ASC"
  | "cdeunt_DESC"
  | "dtepjc_ASC"
  | "dtepjc_DESC"
  | "libunt_ASC"
  | "libunt_DESC"
  | "typuni_ASC"
  | "typuni_DESC";

export type DetentionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lib_ASC"
  | "lib_DESC";

export type InventaireOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lib_ASC"
  | "lib_DESC"
  | "dtever_ASC"
  | "dtever_DESC"
  | "exideb_ASC"
  | "exideb_DESC"
  | "dtecre_ASC"
  | "dtecre_DESC"
  | "cdevrf_ASC"
  | "cdevrf_DESC"
  | "obs_ASC"
  | "obs_DESC";

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "numref_ASC"
  | "numref_DESC"
  | "nno_ASC"
  | "nno_DESC"
  | "lib_ASC"
  | "lib_DESC"
  | "untcpt_ASC"
  | "untcpt_DESC"
  | "untprx_ASC"
  | "untprx_DESC"
  | "cdeapr_ASC"
  | "cdeapr_DESC"
  | "srvpou_ASC"
  | "srvpou_DESC"
  | "typart_ASC"
  | "typart_DESC"
  | "numser_ASC"
  | "numser_DESC"
  | "pictureUrl_ASC"
  | "pictureUrl_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  numref?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dtecre?: Maybe<DateTimeInput>;
  dtecre_not?: Maybe<DateTimeInput>;
  dtecre_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_lt?: Maybe<DateTimeInput>;
  dtecre_lte?: Maybe<DateTimeInput>;
  dtecre_gt?: Maybe<DateTimeInput>;
  dtecre_gte?: Maybe<DateTimeInput>;
  identifiant?: Maybe<String>;
  identifiant_not?: Maybe<String>;
  identifiant_in?: Maybe<String[] | String>;
  identifiant_not_in?: Maybe<String[] | String>;
  identifiant_lt?: Maybe<String>;
  identifiant_lte?: Maybe<String>;
  identifiant_gt?: Maybe<String>;
  identifiant_gte?: Maybe<String>;
  identifiant_contains?: Maybe<String>;
  identifiant_not_contains?: Maybe<String>;
  identifiant_starts_with?: Maybe<String>;
  identifiant_not_starts_with?: Maybe<String>;
  identifiant_ends_with?: Maybe<String>;
  identifiant_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  nom?: Maybe<String>;
  nom_not?: Maybe<String>;
  nom_in?: Maybe<String[] | String>;
  nom_not_in?: Maybe<String[] | String>;
  nom_lt?: Maybe<String>;
  nom_lte?: Maybe<String>;
  nom_gt?: Maybe<String>;
  nom_gte?: Maybe<String>;
  nom_contains?: Maybe<String>;
  nom_not_contains?: Maybe<String>;
  nom_starts_with?: Maybe<String>;
  nom_not_starts_with?: Maybe<String>;
  nom_ends_with?: Maybe<String>;
  nom_not_ends_with?: Maybe<String>;
  prenom?: Maybe<String>;
  prenom_not?: Maybe<String>;
  prenom_in?: Maybe<String[] | String>;
  prenom_not_in?: Maybe<String[] | String>;
  prenom_lt?: Maybe<String>;
  prenom_lte?: Maybe<String>;
  prenom_gt?: Maybe<String>;
  prenom_gte?: Maybe<String>;
  prenom_contains?: Maybe<String>;
  prenom_not_contains?: Maybe<String>;
  prenom_starts_with?: Maybe<String>;
  prenom_not_starts_with?: Maybe<String>;
  prenom_ends_with?: Maybe<String>;
  prenom_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  unites_some?: Maybe<UniteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UniteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cdeunt?: Maybe<String>;
  cdeunt_not?: Maybe<String>;
  cdeunt_in?: Maybe<String[] | String>;
  cdeunt_not_in?: Maybe<String[] | String>;
  cdeunt_lt?: Maybe<String>;
  cdeunt_lte?: Maybe<String>;
  cdeunt_gt?: Maybe<String>;
  cdeunt_gte?: Maybe<String>;
  cdeunt_contains?: Maybe<String>;
  cdeunt_not_contains?: Maybe<String>;
  cdeunt_starts_with?: Maybe<String>;
  cdeunt_not_starts_with?: Maybe<String>;
  cdeunt_ends_with?: Maybe<String>;
  cdeunt_not_ends_with?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  dtepjc_not?: Maybe<DateTimeInput>;
  dtepjc_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtepjc_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtepjc_lt?: Maybe<DateTimeInput>;
  dtepjc_lte?: Maybe<DateTimeInput>;
  dtepjc_gt?: Maybe<DateTimeInput>;
  dtepjc_gte?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  libunt_not?: Maybe<String>;
  libunt_in?: Maybe<String[] | String>;
  libunt_not_in?: Maybe<String[] | String>;
  libunt_lt?: Maybe<String>;
  libunt_lte?: Maybe<String>;
  libunt_gt?: Maybe<String>;
  libunt_gte?: Maybe<String>;
  libunt_contains?: Maybe<String>;
  libunt_not_contains?: Maybe<String>;
  libunt_starts_with?: Maybe<String>;
  libunt_not_starts_with?: Maybe<String>;
  libunt_ends_with?: Maybe<String>;
  libunt_not_ends_with?: Maybe<String>;
  typuni?: Maybe<String>;
  typuni_not?: Maybe<String>;
  typuni_in?: Maybe<String[] | String>;
  typuni_not_in?: Maybe<String[] | String>;
  typuni_lt?: Maybe<String>;
  typuni_lte?: Maybe<String>;
  typuni_gt?: Maybe<String>;
  typuni_gte?: Maybe<String>;
  typuni_contains?: Maybe<String>;
  typuni_not_contains?: Maybe<String>;
  typuni_starts_with?: Maybe<String>;
  typuni_not_starts_with?: Maybe<String>;
  typuni_ends_with?: Maybe<String>;
  typuni_not_ends_with?: Maybe<String>;
  users_some?: Maybe<UserWhereInput>;
  detentions_some?: Maybe<DetentionWhereInput>;
  AND?: Maybe<UniteWhereInput[] | UniteWhereInput>;
}

export interface DetentionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  unite?: Maybe<UniteWhereInput>;
  inventaires_some?: Maybe<InventaireWhereInput>;
  AND?: Maybe<DetentionWhereInput[] | DetentionWhereInput>;
}

export interface InventaireWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  dtever_not?: Maybe<DateTimeInput>;
  dtever_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtever_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtever_lt?: Maybe<DateTimeInput>;
  dtever_lte?: Maybe<DateTimeInput>;
  dtever_gt?: Maybe<DateTimeInput>;
  dtever_gte?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  exideb_not?: Maybe<String>;
  exideb_in?: Maybe<String[] | String>;
  exideb_not_in?: Maybe<String[] | String>;
  exideb_lt?: Maybe<String>;
  exideb_lte?: Maybe<String>;
  exideb_gt?: Maybe<String>;
  exideb_gte?: Maybe<String>;
  exideb_contains?: Maybe<String>;
  exideb_not_contains?: Maybe<String>;
  exideb_starts_with?: Maybe<String>;
  exideb_not_starts_with?: Maybe<String>;
  exideb_ends_with?: Maybe<String>;
  exideb_not_ends_with?: Maybe<String>;
  dtecre?: Maybe<DateTimeInput>;
  dtecre_not?: Maybe<DateTimeInput>;
  dtecre_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_lt?: Maybe<DateTimeInput>;
  dtecre_lte?: Maybe<DateTimeInput>;
  dtecre_gt?: Maybe<DateTimeInput>;
  dtecre_gte?: Maybe<DateTimeInput>;
  cdevrf?: Maybe<String>;
  cdevrf_not?: Maybe<String>;
  cdevrf_in?: Maybe<String[] | String>;
  cdevrf_not_in?: Maybe<String[] | String>;
  cdevrf_lt?: Maybe<String>;
  cdevrf_lte?: Maybe<String>;
  cdevrf_gt?: Maybe<String>;
  cdevrf_gte?: Maybe<String>;
  cdevrf_contains?: Maybe<String>;
  cdevrf_not_contains?: Maybe<String>;
  cdevrf_starts_with?: Maybe<String>;
  cdevrf_not_starts_with?: Maybe<String>;
  cdevrf_ends_with?: Maybe<String>;
  cdevrf_not_ends_with?: Maybe<String>;
  obs?: Maybe<String>;
  obs_not?: Maybe<String>;
  obs_in?: Maybe<String[] | String>;
  obs_not_in?: Maybe<String[] | String>;
  obs_lt?: Maybe<String>;
  obs_lte?: Maybe<String>;
  obs_gt?: Maybe<String>;
  obs_gte?: Maybe<String>;
  obs_contains?: Maybe<String>;
  obs_not_contains?: Maybe<String>;
  obs_starts_with?: Maybe<String>;
  obs_not_starts_with?: Maybe<String>;
  obs_ends_with?: Maybe<String>;
  obs_not_ends_with?: Maybe<String>;
  articles_some?: Maybe<ArticleEmbeddedWhereInput>;
  articles_every?: Maybe<ArticleEmbeddedRestrictedWhereInput>;
  articles_none?: Maybe<ArticleEmbeddedRestrictedWhereInput>;
  detention?: Maybe<DetentionWhereInput>;
  AND?: Maybe<InventaireWhereInput[] | InventaireWhereInput>;
}

export interface ArticleEmbeddedWhereInput {
  article_id?: Maybe<ID_Input>;
  article_id_not?: Maybe<ID_Input>;
  article_id_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_not_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_lt?: Maybe<ID_Input>;
  article_id_lte?: Maybe<ID_Input>;
  article_id_gt?: Maybe<ID_Input>;
  article_id_gte?: Maybe<ID_Input>;
  article_id_contains?: Maybe<ID_Input>;
  article_id_not_contains?: Maybe<ID_Input>;
  article_id_starts_with?: Maybe<ID_Input>;
  article_id_not_starts_with?: Maybe<ID_Input>;
  article_id_ends_with?: Maybe<ID_Input>;
  article_id_not_ends_with?: Maybe<ID_Input>;
  nno?: Maybe<String>;
  nno_not?: Maybe<String>;
  nno_in?: Maybe<String[] | String>;
  nno_not_in?: Maybe<String[] | String>;
  nno_lt?: Maybe<String>;
  nno_lte?: Maybe<String>;
  nno_gt?: Maybe<String>;
  nno_gte?: Maybe<String>;
  nno_contains?: Maybe<String>;
  nno_not_contains?: Maybe<String>;
  nno_starts_with?: Maybe<String>;
  nno_not_starts_with?: Maybe<String>;
  nno_ends_with?: Maybe<String>;
  nno_not_ends_with?: Maybe<String>;
  numref?: Maybe<String>;
  numref_not?: Maybe<String>;
  numref_in?: Maybe<String[] | String>;
  numref_not_in?: Maybe<String[] | String>;
  numref_lt?: Maybe<String>;
  numref_lte?: Maybe<String>;
  numref_gt?: Maybe<String>;
  numref_gte?: Maybe<String>;
  numref_contains?: Maybe<String>;
  numref_not_contains?: Maybe<String>;
  numref_starts_with?: Maybe<String>;
  numref_not_starts_with?: Maybe<String>;
  numref_ends_with?: Maybe<String>;
  numref_not_ends_with?: Maybe<String>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untcpt_not?: Maybe<Int>;
  untcpt_in?: Maybe<Int[] | Int>;
  untcpt_not_in?: Maybe<Int[] | Int>;
  untcpt_lt?: Maybe<Int>;
  untcpt_lte?: Maybe<Int>;
  untcpt_gt?: Maybe<Int>;
  untcpt_gte?: Maybe<Int>;
  untprx?: Maybe<Float>;
  untprx_not?: Maybe<Float>;
  untprx_in?: Maybe<Float[] | Float>;
  untprx_not_in?: Maybe<Float[] | Float>;
  untprx_lt?: Maybe<Float>;
  untprx_lte?: Maybe<Float>;
  untprx_gt?: Maybe<Float>;
  untprx_gte?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  cdeapr_not?: Maybe<String>;
  cdeapr_in?: Maybe<String[] | String>;
  cdeapr_not_in?: Maybe<String[] | String>;
  cdeapr_lt?: Maybe<String>;
  cdeapr_lte?: Maybe<String>;
  cdeapr_gt?: Maybe<String>;
  cdeapr_gte?: Maybe<String>;
  cdeapr_contains?: Maybe<String>;
  cdeapr_not_contains?: Maybe<String>;
  cdeapr_starts_with?: Maybe<String>;
  cdeapr_not_starts_with?: Maybe<String>;
  cdeapr_ends_with?: Maybe<String>;
  cdeapr_not_ends_with?: Maybe<String>;
  srvpou?: Maybe<String>;
  srvpou_not?: Maybe<String>;
  srvpou_in?: Maybe<String[] | String>;
  srvpou_not_in?: Maybe<String[] | String>;
  srvpou_lt?: Maybe<String>;
  srvpou_lte?: Maybe<String>;
  srvpou_gt?: Maybe<String>;
  srvpou_gte?: Maybe<String>;
  srvpou_contains?: Maybe<String>;
  srvpou_not_contains?: Maybe<String>;
  srvpou_starts_with?: Maybe<String>;
  srvpou_not_starts_with?: Maybe<String>;
  srvpou_ends_with?: Maybe<String>;
  srvpou_not_ends_with?: Maybe<String>;
  typart?: Maybe<String>;
  typart_not?: Maybe<String>;
  typart_in?: Maybe<String[] | String>;
  typart_not_in?: Maybe<String[] | String>;
  typart_lt?: Maybe<String>;
  typart_lte?: Maybe<String>;
  typart_gt?: Maybe<String>;
  typart_gte?: Maybe<String>;
  typart_contains?: Maybe<String>;
  typart_not_contains?: Maybe<String>;
  typart_starts_with?: Maybe<String>;
  typart_not_starts_with?: Maybe<String>;
  typart_ends_with?: Maybe<String>;
  typart_not_ends_with?: Maybe<String>;
  numser?: Maybe<String>;
  numser_not?: Maybe<String>;
  numser_in?: Maybe<String[] | String>;
  numser_not_in?: Maybe<String[] | String>;
  numser_lt?: Maybe<String>;
  numser_lte?: Maybe<String>;
  numser_gt?: Maybe<String>;
  numser_gte?: Maybe<String>;
  numser_contains?: Maybe<String>;
  numser_not_contains?: Maybe<String>;
  numser_starts_with?: Maybe<String>;
  numser_not_starts_with?: Maybe<String>;
  numser_ends_with?: Maybe<String>;
  numser_not_ends_with?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  pictureUrl_not?: Maybe<String>;
  pictureUrl_in?: Maybe<String[] | String>;
  pictureUrl_not_in?: Maybe<String[] | String>;
  pictureUrl_lt?: Maybe<String>;
  pictureUrl_lte?: Maybe<String>;
  pictureUrl_gt?: Maybe<String>;
  pictureUrl_gte?: Maybe<String>;
  pictureUrl_contains?: Maybe<String>;
  pictureUrl_not_contains?: Maybe<String>;
  pictureUrl_starts_with?: Maybe<String>;
  pictureUrl_not_starts_with?: Maybe<String>;
  pictureUrl_ends_with?: Maybe<String>;
  pictureUrl_not_ends_with?: Maybe<String>;
  detention?: Maybe<DetentionWhereInput>;
  AND?: Maybe<ArticleEmbeddedWhereInput[] | ArticleEmbeddedWhereInput>;
}

export interface ArticleEmbeddedRestrictedWhereInput {
  article_id?: Maybe<ID_Input>;
  article_id_not?: Maybe<ID_Input>;
  article_id_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_not_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_lt?: Maybe<ID_Input>;
  article_id_lte?: Maybe<ID_Input>;
  article_id_gt?: Maybe<ID_Input>;
  article_id_gte?: Maybe<ID_Input>;
  article_id_contains?: Maybe<ID_Input>;
  article_id_not_contains?: Maybe<ID_Input>;
  article_id_starts_with?: Maybe<ID_Input>;
  article_id_not_starts_with?: Maybe<ID_Input>;
  article_id_ends_with?: Maybe<ID_Input>;
  article_id_not_ends_with?: Maybe<ID_Input>;
  nno?: Maybe<String>;
  nno_not?: Maybe<String>;
  nno_in?: Maybe<String[] | String>;
  nno_not_in?: Maybe<String[] | String>;
  nno_lt?: Maybe<String>;
  nno_lte?: Maybe<String>;
  nno_gt?: Maybe<String>;
  nno_gte?: Maybe<String>;
  nno_contains?: Maybe<String>;
  nno_not_contains?: Maybe<String>;
  nno_starts_with?: Maybe<String>;
  nno_not_starts_with?: Maybe<String>;
  nno_ends_with?: Maybe<String>;
  nno_not_ends_with?: Maybe<String>;
  numref?: Maybe<String>;
  numref_not?: Maybe<String>;
  numref_in?: Maybe<String[] | String>;
  numref_not_in?: Maybe<String[] | String>;
  numref_lt?: Maybe<String>;
  numref_lte?: Maybe<String>;
  numref_gt?: Maybe<String>;
  numref_gte?: Maybe<String>;
  numref_contains?: Maybe<String>;
  numref_not_contains?: Maybe<String>;
  numref_starts_with?: Maybe<String>;
  numref_not_starts_with?: Maybe<String>;
  numref_ends_with?: Maybe<String>;
  numref_not_ends_with?: Maybe<String>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untcpt_not?: Maybe<Int>;
  untcpt_in?: Maybe<Int[] | Int>;
  untcpt_not_in?: Maybe<Int[] | Int>;
  untcpt_lt?: Maybe<Int>;
  untcpt_lte?: Maybe<Int>;
  untcpt_gt?: Maybe<Int>;
  untcpt_gte?: Maybe<Int>;
  untprx?: Maybe<Float>;
  untprx_not?: Maybe<Float>;
  untprx_in?: Maybe<Float[] | Float>;
  untprx_not_in?: Maybe<Float[] | Float>;
  untprx_lt?: Maybe<Float>;
  untprx_lte?: Maybe<Float>;
  untprx_gt?: Maybe<Float>;
  untprx_gte?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  cdeapr_not?: Maybe<String>;
  cdeapr_in?: Maybe<String[] | String>;
  cdeapr_not_in?: Maybe<String[] | String>;
  cdeapr_lt?: Maybe<String>;
  cdeapr_lte?: Maybe<String>;
  cdeapr_gt?: Maybe<String>;
  cdeapr_gte?: Maybe<String>;
  cdeapr_contains?: Maybe<String>;
  cdeapr_not_contains?: Maybe<String>;
  cdeapr_starts_with?: Maybe<String>;
  cdeapr_not_starts_with?: Maybe<String>;
  cdeapr_ends_with?: Maybe<String>;
  cdeapr_not_ends_with?: Maybe<String>;
  srvpou?: Maybe<String>;
  srvpou_not?: Maybe<String>;
  srvpou_in?: Maybe<String[] | String>;
  srvpou_not_in?: Maybe<String[] | String>;
  srvpou_lt?: Maybe<String>;
  srvpou_lte?: Maybe<String>;
  srvpou_gt?: Maybe<String>;
  srvpou_gte?: Maybe<String>;
  srvpou_contains?: Maybe<String>;
  srvpou_not_contains?: Maybe<String>;
  srvpou_starts_with?: Maybe<String>;
  srvpou_not_starts_with?: Maybe<String>;
  srvpou_ends_with?: Maybe<String>;
  srvpou_not_ends_with?: Maybe<String>;
  typart?: Maybe<String>;
  typart_not?: Maybe<String>;
  typart_in?: Maybe<String[] | String>;
  typart_not_in?: Maybe<String[] | String>;
  typart_lt?: Maybe<String>;
  typart_lte?: Maybe<String>;
  typart_gt?: Maybe<String>;
  typart_gte?: Maybe<String>;
  typart_contains?: Maybe<String>;
  typart_not_contains?: Maybe<String>;
  typart_starts_with?: Maybe<String>;
  typart_not_starts_with?: Maybe<String>;
  typart_ends_with?: Maybe<String>;
  typart_not_ends_with?: Maybe<String>;
  numser?: Maybe<String>;
  numser_not?: Maybe<String>;
  numser_in?: Maybe<String[] | String>;
  numser_not_in?: Maybe<String[] | String>;
  numser_lt?: Maybe<String>;
  numser_lte?: Maybe<String>;
  numser_gt?: Maybe<String>;
  numser_gte?: Maybe<String>;
  numser_contains?: Maybe<String>;
  numser_not_contains?: Maybe<String>;
  numser_starts_with?: Maybe<String>;
  numser_not_starts_with?: Maybe<String>;
  numser_ends_with?: Maybe<String>;
  numser_not_ends_with?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  pictureUrl_not?: Maybe<String>;
  pictureUrl_in?: Maybe<String[] | String>;
  pictureUrl_not_in?: Maybe<String[] | String>;
  pictureUrl_lt?: Maybe<String>;
  pictureUrl_lte?: Maybe<String>;
  pictureUrl_gt?: Maybe<String>;
  pictureUrl_gte?: Maybe<String>;
  pictureUrl_contains?: Maybe<String>;
  pictureUrl_not_contains?: Maybe<String>;
  pictureUrl_starts_with?: Maybe<String>;
  pictureUrl_not_starts_with?: Maybe<String>;
  pictureUrl_ends_with?: Maybe<String>;
  pictureUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ArticleEmbeddedRestrictedWhereInput[] | ArticleEmbeddedRestrictedWhereInput
  >;
}

export interface ArticleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  numref?: Maybe<String>;
  numref_not?: Maybe<String>;
  numref_in?: Maybe<String[] | String>;
  numref_not_in?: Maybe<String[] | String>;
  numref_lt?: Maybe<String>;
  numref_lte?: Maybe<String>;
  numref_gt?: Maybe<String>;
  numref_gte?: Maybe<String>;
  numref_contains?: Maybe<String>;
  numref_not_contains?: Maybe<String>;
  numref_starts_with?: Maybe<String>;
  numref_not_starts_with?: Maybe<String>;
  numref_ends_with?: Maybe<String>;
  numref_not_ends_with?: Maybe<String>;
  nno?: Maybe<String>;
  nno_not?: Maybe<String>;
  nno_in?: Maybe<String[] | String>;
  nno_not_in?: Maybe<String[] | String>;
  nno_lt?: Maybe<String>;
  nno_lte?: Maybe<String>;
  nno_gt?: Maybe<String>;
  nno_gte?: Maybe<String>;
  nno_contains?: Maybe<String>;
  nno_not_contains?: Maybe<String>;
  nno_starts_with?: Maybe<String>;
  nno_not_starts_with?: Maybe<String>;
  nno_ends_with?: Maybe<String>;
  nno_not_ends_with?: Maybe<String>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untcpt_not?: Maybe<Int>;
  untcpt_in?: Maybe<Int[] | Int>;
  untcpt_not_in?: Maybe<Int[] | Int>;
  untcpt_lt?: Maybe<Int>;
  untcpt_lte?: Maybe<Int>;
  untcpt_gt?: Maybe<Int>;
  untcpt_gte?: Maybe<Int>;
  untprx?: Maybe<Float>;
  untprx_not?: Maybe<Float>;
  untprx_in?: Maybe<Float[] | Float>;
  untprx_not_in?: Maybe<Float[] | Float>;
  untprx_lt?: Maybe<Float>;
  untprx_lte?: Maybe<Float>;
  untprx_gt?: Maybe<Float>;
  untprx_gte?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  cdeapr_not?: Maybe<String>;
  cdeapr_in?: Maybe<String[] | String>;
  cdeapr_not_in?: Maybe<String[] | String>;
  cdeapr_lt?: Maybe<String>;
  cdeapr_lte?: Maybe<String>;
  cdeapr_gt?: Maybe<String>;
  cdeapr_gte?: Maybe<String>;
  cdeapr_contains?: Maybe<String>;
  cdeapr_not_contains?: Maybe<String>;
  cdeapr_starts_with?: Maybe<String>;
  cdeapr_not_starts_with?: Maybe<String>;
  cdeapr_ends_with?: Maybe<String>;
  cdeapr_not_ends_with?: Maybe<String>;
  srvpou?: Maybe<String>;
  srvpou_not?: Maybe<String>;
  srvpou_in?: Maybe<String[] | String>;
  srvpou_not_in?: Maybe<String[] | String>;
  srvpou_lt?: Maybe<String>;
  srvpou_lte?: Maybe<String>;
  srvpou_gt?: Maybe<String>;
  srvpou_gte?: Maybe<String>;
  srvpou_contains?: Maybe<String>;
  srvpou_not_contains?: Maybe<String>;
  srvpou_starts_with?: Maybe<String>;
  srvpou_not_starts_with?: Maybe<String>;
  srvpou_ends_with?: Maybe<String>;
  srvpou_not_ends_with?: Maybe<String>;
  typart?: Maybe<String>;
  typart_not?: Maybe<String>;
  typart_in?: Maybe<String[] | String>;
  typart_not_in?: Maybe<String[] | String>;
  typart_lt?: Maybe<String>;
  typart_lte?: Maybe<String>;
  typart_gt?: Maybe<String>;
  typart_gte?: Maybe<String>;
  typart_contains?: Maybe<String>;
  typart_not_contains?: Maybe<String>;
  typart_starts_with?: Maybe<String>;
  typart_not_starts_with?: Maybe<String>;
  typart_ends_with?: Maybe<String>;
  typart_not_ends_with?: Maybe<String>;
  numser?: Maybe<String>;
  numser_not?: Maybe<String>;
  numser_in?: Maybe<String[] | String>;
  numser_not_in?: Maybe<String[] | String>;
  numser_lt?: Maybe<String>;
  numser_lte?: Maybe<String>;
  numser_gt?: Maybe<String>;
  numser_gte?: Maybe<String>;
  numser_contains?: Maybe<String>;
  numser_not_contains?: Maybe<String>;
  numser_starts_with?: Maybe<String>;
  numser_not_starts_with?: Maybe<String>;
  numser_ends_with?: Maybe<String>;
  numser_not_ends_with?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  pictureUrl_not?: Maybe<String>;
  pictureUrl_in?: Maybe<String[] | String>;
  pictureUrl_not_in?: Maybe<String[] | String>;
  pictureUrl_lt?: Maybe<String>;
  pictureUrl_lte?: Maybe<String>;
  pictureUrl_gt?: Maybe<String>;
  pictureUrl_gte?: Maybe<String>;
  pictureUrl_contains?: Maybe<String>;
  pictureUrl_not_contains?: Maybe<String>;
  pictureUrl_starts_with?: Maybe<String>;
  pictureUrl_not_starts_with?: Maybe<String>;
  pictureUrl_ends_with?: Maybe<String>;
  pictureUrl_not_ends_with?: Maybe<String>;
  detention?: Maybe<DetentionWhereInput>;
  AND?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
}

export type DetentionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InventaireWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UniteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  identifiant?: Maybe<String>;
}>;

export interface ArticleCreateInput {
  id?: Maybe<ID_Input>;
  numref: String;
  nno: String;
  lib: String;
  untcpt?: Maybe<Int>;
  untprx?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  srvpou?: Maybe<String>;
  typart?: Maybe<String>;
  numser?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  detention?: Maybe<DetentionCreateOneInput>;
}

export interface DetentionCreateOneInput {
  create?: Maybe<DetentionCreateInput>;
  connect?: Maybe<DetentionWhereUniqueInput>;
}

export interface DetentionCreateInput {
  id?: Maybe<ID_Input>;
  lib: String;
  unite: UniteCreateOneWithoutDetentionsInput;
  inventaires?: Maybe<InventaireCreateManyWithoutDetentionInput>;
}

export interface UniteCreateOneWithoutDetentionsInput {
  create?: Maybe<UniteCreateWithoutDetentionsInput>;
  connect?: Maybe<UniteWhereUniqueInput>;
}

export interface UniteCreateWithoutDetentionsInput {
  id?: Maybe<ID_Input>;
  cdeunt: String;
  dtepjc?: Maybe<DateTimeInput>;
  libunt: String;
  typuni?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutUnitesInput>;
}

export interface UserCreateManyWithoutUnitesInput {
  create?: Maybe<UserCreateWithoutUnitesInput[] | UserCreateWithoutUnitesInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutUnitesInput {
  id?: Maybe<ID_Input>;
  identifiant: String;
  password: String;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface InventaireCreateManyWithoutDetentionInput {
  create?: Maybe<
    | InventaireCreateWithoutDetentionInput[]
    | InventaireCreateWithoutDetentionInput
  >;
  connect?: Maybe<InventaireWhereUniqueInput[] | InventaireWhereUniqueInput>;
}

export interface InventaireCreateWithoutDetentionInput {
  id?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
  articles?: Maybe<ArticleEmbeddedCreateManyInput>;
}

export interface ArticleEmbeddedCreateManyInput {
  create?: Maybe<ArticleEmbeddedCreateInput[] | ArticleEmbeddedCreateInput>;
}

export interface ArticleEmbeddedCreateInput {
  article_id: ID_Input;
  nno: String;
  numref: String;
  lib: String;
  untcpt?: Maybe<Int>;
  untprx?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  srvpou?: Maybe<String>;
  typart?: Maybe<String>;
  numser?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  detention?: Maybe<DetentionCreateOneInput>;
}

export interface ArticleUpdateInput {
  numref?: Maybe<String>;
  nno?: Maybe<String>;
  lib?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untprx?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  srvpou?: Maybe<String>;
  typart?: Maybe<String>;
  numser?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  detention?: Maybe<DetentionUpdateOneInput>;
}

export interface DetentionUpdateOneInput {
  create?: Maybe<DetentionCreateInput>;
  update?: Maybe<DetentionUpdateDataInput>;
  upsert?: Maybe<DetentionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DetentionWhereUniqueInput>;
}

export interface DetentionUpdateDataInput {
  lib?: Maybe<String>;
  unite?: Maybe<UniteUpdateOneRequiredWithoutDetentionsInput>;
  inventaires?: Maybe<InventaireUpdateManyWithoutDetentionInput>;
}

export interface UniteUpdateOneRequiredWithoutDetentionsInput {
  create?: Maybe<UniteCreateWithoutDetentionsInput>;
  update?: Maybe<UniteUpdateWithoutDetentionsDataInput>;
  upsert?: Maybe<UniteUpsertWithoutDetentionsInput>;
  connect?: Maybe<UniteWhereUniqueInput>;
}

export interface UniteUpdateWithoutDetentionsDataInput {
  cdeunt?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  typuni?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutUnitesInput>;
}

export interface UserUpdateManyWithoutUnitesInput {
  create?: Maybe<UserCreateWithoutUnitesInput[] | UserCreateWithoutUnitesInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutUnitesInput[]
    | UserUpdateWithWhereUniqueWithoutUnitesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutUnitesInput[]
    | UserUpsertWithWhereUniqueWithoutUnitesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutUnitesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutUnitesDataInput;
}

export interface UserUpdateWithoutUnitesDataInput {
  identifiant?: Maybe<String>;
  password?: Maybe<String>;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface UserUpsertWithWhereUniqueWithoutUnitesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutUnitesDataInput;
  create: UserCreateWithoutUnitesInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dtecre?: Maybe<DateTimeInput>;
  dtecre_not?: Maybe<DateTimeInput>;
  dtecre_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_lt?: Maybe<DateTimeInput>;
  dtecre_lte?: Maybe<DateTimeInput>;
  dtecre_gt?: Maybe<DateTimeInput>;
  dtecre_gte?: Maybe<DateTimeInput>;
  identifiant?: Maybe<String>;
  identifiant_not?: Maybe<String>;
  identifiant_in?: Maybe<String[] | String>;
  identifiant_not_in?: Maybe<String[] | String>;
  identifiant_lt?: Maybe<String>;
  identifiant_lte?: Maybe<String>;
  identifiant_gt?: Maybe<String>;
  identifiant_gte?: Maybe<String>;
  identifiant_contains?: Maybe<String>;
  identifiant_not_contains?: Maybe<String>;
  identifiant_starts_with?: Maybe<String>;
  identifiant_not_starts_with?: Maybe<String>;
  identifiant_ends_with?: Maybe<String>;
  identifiant_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  nom?: Maybe<String>;
  nom_not?: Maybe<String>;
  nom_in?: Maybe<String[] | String>;
  nom_not_in?: Maybe<String[] | String>;
  nom_lt?: Maybe<String>;
  nom_lte?: Maybe<String>;
  nom_gt?: Maybe<String>;
  nom_gte?: Maybe<String>;
  nom_contains?: Maybe<String>;
  nom_not_contains?: Maybe<String>;
  nom_starts_with?: Maybe<String>;
  nom_not_starts_with?: Maybe<String>;
  nom_ends_with?: Maybe<String>;
  nom_not_ends_with?: Maybe<String>;
  prenom?: Maybe<String>;
  prenom_not?: Maybe<String>;
  prenom_in?: Maybe<String[] | String>;
  prenom_not_in?: Maybe<String[] | String>;
  prenom_lt?: Maybe<String>;
  prenom_lte?: Maybe<String>;
  prenom_gt?: Maybe<String>;
  prenom_gte?: Maybe<String>;
  prenom_contains?: Maybe<String>;
  prenom_not_contains?: Maybe<String>;
  prenom_starts_with?: Maybe<String>;
  prenom_not_starts_with?: Maybe<String>;
  prenom_ends_with?: Maybe<String>;
  prenom_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  identifiant?: Maybe<String>;
  password?: Maybe<String>;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface UniteUpsertWithoutDetentionsInput {
  update: UniteUpdateWithoutDetentionsDataInput;
  create: UniteCreateWithoutDetentionsInput;
}

export interface InventaireUpdateManyWithoutDetentionInput {
  create?: Maybe<
    | InventaireCreateWithoutDetentionInput[]
    | InventaireCreateWithoutDetentionInput
  >;
  delete?: Maybe<InventaireWhereUniqueInput[] | InventaireWhereUniqueInput>;
  connect?: Maybe<InventaireWhereUniqueInput[] | InventaireWhereUniqueInput>;
  set?: Maybe<InventaireWhereUniqueInput[] | InventaireWhereUniqueInput>;
  disconnect?: Maybe<InventaireWhereUniqueInput[] | InventaireWhereUniqueInput>;
  update?: Maybe<
    | InventaireUpdateWithWhereUniqueWithoutDetentionInput[]
    | InventaireUpdateWithWhereUniqueWithoutDetentionInput
  >;
  upsert?: Maybe<
    | InventaireUpsertWithWhereUniqueWithoutDetentionInput[]
    | InventaireUpsertWithWhereUniqueWithoutDetentionInput
  >;
  deleteMany?: Maybe<InventaireScalarWhereInput[] | InventaireScalarWhereInput>;
  updateMany?: Maybe<
    | InventaireUpdateManyWithWhereNestedInput[]
    | InventaireUpdateManyWithWhereNestedInput
  >;
}

export interface InventaireUpdateWithWhereUniqueWithoutDetentionInput {
  where: InventaireWhereUniqueInput;
  data: InventaireUpdateWithoutDetentionDataInput;
}

export interface InventaireUpdateWithoutDetentionDataInput {
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
  articles?: Maybe<ArticleEmbeddedUpdateManyInput>;
}

export interface ArticleEmbeddedUpdateManyInput {
  create?: Maybe<ArticleEmbeddedCreateInput[] | ArticleEmbeddedCreateInput>;
  deleteMany?: Maybe<
    ArticleEmbeddedScalarWhereInput[] | ArticleEmbeddedScalarWhereInput
  >;
  updateMany?: Maybe<
    | ArticleEmbeddedUpdateManyWithWhereNestedInput[]
    | ArticleEmbeddedUpdateManyWithWhereNestedInput
  >;
}

export interface ArticleEmbeddedScalarWhereInput {
  article_id?: Maybe<ID_Input>;
  article_id_not?: Maybe<ID_Input>;
  article_id_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_not_in?: Maybe<ID_Input[] | ID_Input>;
  article_id_lt?: Maybe<ID_Input>;
  article_id_lte?: Maybe<ID_Input>;
  article_id_gt?: Maybe<ID_Input>;
  article_id_gte?: Maybe<ID_Input>;
  article_id_contains?: Maybe<ID_Input>;
  article_id_not_contains?: Maybe<ID_Input>;
  article_id_starts_with?: Maybe<ID_Input>;
  article_id_not_starts_with?: Maybe<ID_Input>;
  article_id_ends_with?: Maybe<ID_Input>;
  article_id_not_ends_with?: Maybe<ID_Input>;
  nno?: Maybe<String>;
  nno_not?: Maybe<String>;
  nno_in?: Maybe<String[] | String>;
  nno_not_in?: Maybe<String[] | String>;
  nno_lt?: Maybe<String>;
  nno_lte?: Maybe<String>;
  nno_gt?: Maybe<String>;
  nno_gte?: Maybe<String>;
  nno_contains?: Maybe<String>;
  nno_not_contains?: Maybe<String>;
  nno_starts_with?: Maybe<String>;
  nno_not_starts_with?: Maybe<String>;
  nno_ends_with?: Maybe<String>;
  nno_not_ends_with?: Maybe<String>;
  numref?: Maybe<String>;
  numref_not?: Maybe<String>;
  numref_in?: Maybe<String[] | String>;
  numref_not_in?: Maybe<String[] | String>;
  numref_lt?: Maybe<String>;
  numref_lte?: Maybe<String>;
  numref_gt?: Maybe<String>;
  numref_gte?: Maybe<String>;
  numref_contains?: Maybe<String>;
  numref_not_contains?: Maybe<String>;
  numref_starts_with?: Maybe<String>;
  numref_not_starts_with?: Maybe<String>;
  numref_ends_with?: Maybe<String>;
  numref_not_ends_with?: Maybe<String>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untcpt_not?: Maybe<Int>;
  untcpt_in?: Maybe<Int[] | Int>;
  untcpt_not_in?: Maybe<Int[] | Int>;
  untcpt_lt?: Maybe<Int>;
  untcpt_lte?: Maybe<Int>;
  untcpt_gt?: Maybe<Int>;
  untcpt_gte?: Maybe<Int>;
  untprx?: Maybe<Float>;
  untprx_not?: Maybe<Float>;
  untprx_in?: Maybe<Float[] | Float>;
  untprx_not_in?: Maybe<Float[] | Float>;
  untprx_lt?: Maybe<Float>;
  untprx_lte?: Maybe<Float>;
  untprx_gt?: Maybe<Float>;
  untprx_gte?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  cdeapr_not?: Maybe<String>;
  cdeapr_in?: Maybe<String[] | String>;
  cdeapr_not_in?: Maybe<String[] | String>;
  cdeapr_lt?: Maybe<String>;
  cdeapr_lte?: Maybe<String>;
  cdeapr_gt?: Maybe<String>;
  cdeapr_gte?: Maybe<String>;
  cdeapr_contains?: Maybe<String>;
  cdeapr_not_contains?: Maybe<String>;
  cdeapr_starts_with?: Maybe<String>;
  cdeapr_not_starts_with?: Maybe<String>;
  cdeapr_ends_with?: Maybe<String>;
  cdeapr_not_ends_with?: Maybe<String>;
  srvpou?: Maybe<String>;
  srvpou_not?: Maybe<String>;
  srvpou_in?: Maybe<String[] | String>;
  srvpou_not_in?: Maybe<String[] | String>;
  srvpou_lt?: Maybe<String>;
  srvpou_lte?: Maybe<String>;
  srvpou_gt?: Maybe<String>;
  srvpou_gte?: Maybe<String>;
  srvpou_contains?: Maybe<String>;
  srvpou_not_contains?: Maybe<String>;
  srvpou_starts_with?: Maybe<String>;
  srvpou_not_starts_with?: Maybe<String>;
  srvpou_ends_with?: Maybe<String>;
  srvpou_not_ends_with?: Maybe<String>;
  typart?: Maybe<String>;
  typart_not?: Maybe<String>;
  typart_in?: Maybe<String[] | String>;
  typart_not_in?: Maybe<String[] | String>;
  typart_lt?: Maybe<String>;
  typart_lte?: Maybe<String>;
  typart_gt?: Maybe<String>;
  typart_gte?: Maybe<String>;
  typart_contains?: Maybe<String>;
  typart_not_contains?: Maybe<String>;
  typart_starts_with?: Maybe<String>;
  typart_not_starts_with?: Maybe<String>;
  typart_ends_with?: Maybe<String>;
  typart_not_ends_with?: Maybe<String>;
  numser?: Maybe<String>;
  numser_not?: Maybe<String>;
  numser_in?: Maybe<String[] | String>;
  numser_not_in?: Maybe<String[] | String>;
  numser_lt?: Maybe<String>;
  numser_lte?: Maybe<String>;
  numser_gt?: Maybe<String>;
  numser_gte?: Maybe<String>;
  numser_contains?: Maybe<String>;
  numser_not_contains?: Maybe<String>;
  numser_starts_with?: Maybe<String>;
  numser_not_starts_with?: Maybe<String>;
  numser_ends_with?: Maybe<String>;
  numser_not_ends_with?: Maybe<String>;
  pictureUrl?: Maybe<String>;
  pictureUrl_not?: Maybe<String>;
  pictureUrl_in?: Maybe<String[] | String>;
  pictureUrl_not_in?: Maybe<String[] | String>;
  pictureUrl_lt?: Maybe<String>;
  pictureUrl_lte?: Maybe<String>;
  pictureUrl_gt?: Maybe<String>;
  pictureUrl_gte?: Maybe<String>;
  pictureUrl_contains?: Maybe<String>;
  pictureUrl_not_contains?: Maybe<String>;
  pictureUrl_starts_with?: Maybe<String>;
  pictureUrl_not_starts_with?: Maybe<String>;
  pictureUrl_ends_with?: Maybe<String>;
  pictureUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ArticleEmbeddedScalarWhereInput[] | ArticleEmbeddedScalarWhereInput
  >;
  OR?: Maybe<
    ArticleEmbeddedScalarWhereInput[] | ArticleEmbeddedScalarWhereInput
  >;
  NOT?: Maybe<
    ArticleEmbeddedScalarWhereInput[] | ArticleEmbeddedScalarWhereInput
  >;
}

export interface ArticleEmbeddedUpdateManyWithWhereNestedInput {
  where: ArticleEmbeddedScalarWhereInput;
  data: ArticleEmbeddedUpdateManyDataInput;
}

export interface ArticleEmbeddedUpdateManyDataInput {
  article_id?: Maybe<ID_Input>;
  nno?: Maybe<String>;
  numref?: Maybe<String>;
  lib?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untprx?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  srvpou?: Maybe<String>;
  typart?: Maybe<String>;
  numser?: Maybe<String>;
  pictureUrl?: Maybe<String>;
}

export interface InventaireUpsertWithWhereUniqueWithoutDetentionInput {
  where: InventaireWhereUniqueInput;
  update: InventaireUpdateWithoutDetentionDataInput;
  create: InventaireCreateWithoutDetentionInput;
}

export interface InventaireScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  dtever_not?: Maybe<DateTimeInput>;
  dtever_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtever_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtever_lt?: Maybe<DateTimeInput>;
  dtever_lte?: Maybe<DateTimeInput>;
  dtever_gt?: Maybe<DateTimeInput>;
  dtever_gte?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  exideb_not?: Maybe<String>;
  exideb_in?: Maybe<String[] | String>;
  exideb_not_in?: Maybe<String[] | String>;
  exideb_lt?: Maybe<String>;
  exideb_lte?: Maybe<String>;
  exideb_gt?: Maybe<String>;
  exideb_gte?: Maybe<String>;
  exideb_contains?: Maybe<String>;
  exideb_not_contains?: Maybe<String>;
  exideb_starts_with?: Maybe<String>;
  exideb_not_starts_with?: Maybe<String>;
  exideb_ends_with?: Maybe<String>;
  exideb_not_ends_with?: Maybe<String>;
  dtecre?: Maybe<DateTimeInput>;
  dtecre_not?: Maybe<DateTimeInput>;
  dtecre_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtecre_lt?: Maybe<DateTimeInput>;
  dtecre_lte?: Maybe<DateTimeInput>;
  dtecre_gt?: Maybe<DateTimeInput>;
  dtecre_gte?: Maybe<DateTimeInput>;
  cdevrf?: Maybe<String>;
  cdevrf_not?: Maybe<String>;
  cdevrf_in?: Maybe<String[] | String>;
  cdevrf_not_in?: Maybe<String[] | String>;
  cdevrf_lt?: Maybe<String>;
  cdevrf_lte?: Maybe<String>;
  cdevrf_gt?: Maybe<String>;
  cdevrf_gte?: Maybe<String>;
  cdevrf_contains?: Maybe<String>;
  cdevrf_not_contains?: Maybe<String>;
  cdevrf_starts_with?: Maybe<String>;
  cdevrf_not_starts_with?: Maybe<String>;
  cdevrf_ends_with?: Maybe<String>;
  cdevrf_not_ends_with?: Maybe<String>;
  obs?: Maybe<String>;
  obs_not?: Maybe<String>;
  obs_in?: Maybe<String[] | String>;
  obs_not_in?: Maybe<String[] | String>;
  obs_lt?: Maybe<String>;
  obs_lte?: Maybe<String>;
  obs_gt?: Maybe<String>;
  obs_gte?: Maybe<String>;
  obs_contains?: Maybe<String>;
  obs_not_contains?: Maybe<String>;
  obs_starts_with?: Maybe<String>;
  obs_not_starts_with?: Maybe<String>;
  obs_ends_with?: Maybe<String>;
  obs_not_ends_with?: Maybe<String>;
  AND?: Maybe<InventaireScalarWhereInput[] | InventaireScalarWhereInput>;
  OR?: Maybe<InventaireScalarWhereInput[] | InventaireScalarWhereInput>;
  NOT?: Maybe<InventaireScalarWhereInput[] | InventaireScalarWhereInput>;
}

export interface InventaireUpdateManyWithWhereNestedInput {
  where: InventaireScalarWhereInput;
  data: InventaireUpdateManyDataInput;
}

export interface InventaireUpdateManyDataInput {
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
}

export interface DetentionUpsertNestedInput {
  update: DetentionUpdateDataInput;
  create: DetentionCreateInput;
}

export interface ArticleUpdateManyMutationInput {
  numref?: Maybe<String>;
  nno?: Maybe<String>;
  lib?: Maybe<String>;
  untcpt?: Maybe<Int>;
  untprx?: Maybe<Float>;
  cdeapr?: Maybe<String>;
  srvpou?: Maybe<String>;
  typart?: Maybe<String>;
  numser?: Maybe<String>;
  pictureUrl?: Maybe<String>;
}

export interface DetentionUpdateInput {
  lib?: Maybe<String>;
  unite?: Maybe<UniteUpdateOneRequiredWithoutDetentionsInput>;
  inventaires?: Maybe<InventaireUpdateManyWithoutDetentionInput>;
}

export interface DetentionUpdateManyMutationInput {
  lib?: Maybe<String>;
}

export interface InventaireCreateInput {
  id?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
  articles?: Maybe<ArticleEmbeddedCreateManyInput>;
  detention?: Maybe<DetentionCreateOneWithoutInventairesInput>;
}

export interface DetentionCreateOneWithoutInventairesInput {
  create?: Maybe<DetentionCreateWithoutInventairesInput>;
  connect?: Maybe<DetentionWhereUniqueInput>;
}

export interface DetentionCreateWithoutInventairesInput {
  id?: Maybe<ID_Input>;
  lib: String;
  unite: UniteCreateOneWithoutDetentionsInput;
}

export interface InventaireUpdateInput {
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
  articles?: Maybe<ArticleEmbeddedUpdateManyInput>;
  detention?: Maybe<DetentionUpdateOneWithoutInventairesInput>;
}

export interface DetentionUpdateOneWithoutInventairesInput {
  create?: Maybe<DetentionCreateWithoutInventairesInput>;
  update?: Maybe<DetentionUpdateWithoutInventairesDataInput>;
  upsert?: Maybe<DetentionUpsertWithoutInventairesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DetentionWhereUniqueInput>;
}

export interface DetentionUpdateWithoutInventairesDataInput {
  lib?: Maybe<String>;
  unite?: Maybe<UniteUpdateOneRequiredWithoutDetentionsInput>;
}

export interface DetentionUpsertWithoutInventairesInput {
  update: DetentionUpdateWithoutInventairesDataInput;
  create: DetentionCreateWithoutInventairesInput;
}

export interface InventaireUpdateManyMutationInput {
  lib?: Maybe<String>;
  dtever?: Maybe<DateTimeInput>;
  exideb?: Maybe<String>;
  cdevrf?: Maybe<String>;
  obs?: Maybe<String>;
}

export interface UniteCreateInput {
  id?: Maybe<ID_Input>;
  cdeunt: String;
  dtepjc?: Maybe<DateTimeInput>;
  libunt: String;
  typuni?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutUnitesInput>;
  detentions?: Maybe<DetentionCreateManyWithoutUniteInput>;
}

export interface DetentionCreateManyWithoutUniteInput {
  create?: Maybe<
    DetentionCreateWithoutUniteInput[] | DetentionCreateWithoutUniteInput
  >;
  connect?: Maybe<DetentionWhereUniqueInput[] | DetentionWhereUniqueInput>;
}

export interface DetentionCreateWithoutUniteInput {
  id?: Maybe<ID_Input>;
  lib: String;
  inventaires?: Maybe<InventaireCreateManyWithoutDetentionInput>;
}

export interface UniteUpdateInput {
  cdeunt?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  typuni?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutUnitesInput>;
  detentions?: Maybe<DetentionUpdateManyWithoutUniteInput>;
}

export interface DetentionUpdateManyWithoutUniteInput {
  create?: Maybe<
    DetentionCreateWithoutUniteInput[] | DetentionCreateWithoutUniteInput
  >;
  delete?: Maybe<DetentionWhereUniqueInput[] | DetentionWhereUniqueInput>;
  connect?: Maybe<DetentionWhereUniqueInput[] | DetentionWhereUniqueInput>;
  set?: Maybe<DetentionWhereUniqueInput[] | DetentionWhereUniqueInput>;
  disconnect?: Maybe<DetentionWhereUniqueInput[] | DetentionWhereUniqueInput>;
  update?: Maybe<
    | DetentionUpdateWithWhereUniqueWithoutUniteInput[]
    | DetentionUpdateWithWhereUniqueWithoutUniteInput
  >;
  upsert?: Maybe<
    | DetentionUpsertWithWhereUniqueWithoutUniteInput[]
    | DetentionUpsertWithWhereUniqueWithoutUniteInput
  >;
  deleteMany?: Maybe<DetentionScalarWhereInput[] | DetentionScalarWhereInput>;
  updateMany?: Maybe<
    | DetentionUpdateManyWithWhereNestedInput[]
    | DetentionUpdateManyWithWhereNestedInput
  >;
}

export interface DetentionUpdateWithWhereUniqueWithoutUniteInput {
  where: DetentionWhereUniqueInput;
  data: DetentionUpdateWithoutUniteDataInput;
}

export interface DetentionUpdateWithoutUniteDataInput {
  lib?: Maybe<String>;
  inventaires?: Maybe<InventaireUpdateManyWithoutDetentionInput>;
}

export interface DetentionUpsertWithWhereUniqueWithoutUniteInput {
  where: DetentionWhereUniqueInput;
  update: DetentionUpdateWithoutUniteDataInput;
  create: DetentionCreateWithoutUniteInput;
}

export interface DetentionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lib?: Maybe<String>;
  lib_not?: Maybe<String>;
  lib_in?: Maybe<String[] | String>;
  lib_not_in?: Maybe<String[] | String>;
  lib_lt?: Maybe<String>;
  lib_lte?: Maybe<String>;
  lib_gt?: Maybe<String>;
  lib_gte?: Maybe<String>;
  lib_contains?: Maybe<String>;
  lib_not_contains?: Maybe<String>;
  lib_starts_with?: Maybe<String>;
  lib_not_starts_with?: Maybe<String>;
  lib_ends_with?: Maybe<String>;
  lib_not_ends_with?: Maybe<String>;
  AND?: Maybe<DetentionScalarWhereInput[] | DetentionScalarWhereInput>;
  OR?: Maybe<DetentionScalarWhereInput[] | DetentionScalarWhereInput>;
  NOT?: Maybe<DetentionScalarWhereInput[] | DetentionScalarWhereInput>;
}

export interface DetentionUpdateManyWithWhereNestedInput {
  where: DetentionScalarWhereInput;
  data: DetentionUpdateManyDataInput;
}

export interface DetentionUpdateManyDataInput {
  lib?: Maybe<String>;
}

export interface UniteUpdateManyMutationInput {
  cdeunt?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  typuni?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  identifiant: String;
  password: String;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
  unites?: Maybe<UniteCreateManyWithoutUsersInput>;
}

export interface UniteCreateManyWithoutUsersInput {
  create?: Maybe<UniteCreateWithoutUsersInput[] | UniteCreateWithoutUsersInput>;
  connect?: Maybe<UniteWhereUniqueInput[] | UniteWhereUniqueInput>;
}

export interface UniteCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  cdeunt: String;
  dtepjc?: Maybe<DateTimeInput>;
  libunt: String;
  typuni?: Maybe<String>;
  detentions?: Maybe<DetentionCreateManyWithoutUniteInput>;
}

export interface UserUpdateInput {
  identifiant?: Maybe<String>;
  password?: Maybe<String>;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
  unites?: Maybe<UniteUpdateManyWithoutUsersInput>;
}

export interface UniteUpdateManyWithoutUsersInput {
  create?: Maybe<UniteCreateWithoutUsersInput[] | UniteCreateWithoutUsersInput>;
  delete?: Maybe<UniteWhereUniqueInput[] | UniteWhereUniqueInput>;
  connect?: Maybe<UniteWhereUniqueInput[] | UniteWhereUniqueInput>;
  set?: Maybe<UniteWhereUniqueInput[] | UniteWhereUniqueInput>;
  disconnect?: Maybe<UniteWhereUniqueInput[] | UniteWhereUniqueInput>;
  update?: Maybe<
    | UniteUpdateWithWhereUniqueWithoutUsersInput[]
    | UniteUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | UniteUpsertWithWhereUniqueWithoutUsersInput[]
    | UniteUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<UniteScalarWhereInput[] | UniteScalarWhereInput>;
  updateMany?: Maybe<
    UniteUpdateManyWithWhereNestedInput[] | UniteUpdateManyWithWhereNestedInput
  >;
}

export interface UniteUpdateWithWhereUniqueWithoutUsersInput {
  where: UniteWhereUniqueInput;
  data: UniteUpdateWithoutUsersDataInput;
}

export interface UniteUpdateWithoutUsersDataInput {
  cdeunt?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  typuni?: Maybe<String>;
  detentions?: Maybe<DetentionUpdateManyWithoutUniteInput>;
}

export interface UniteUpsertWithWhereUniqueWithoutUsersInput {
  where: UniteWhereUniqueInput;
  update: UniteUpdateWithoutUsersDataInput;
  create: UniteCreateWithoutUsersInput;
}

export interface UniteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cdeunt?: Maybe<String>;
  cdeunt_not?: Maybe<String>;
  cdeunt_in?: Maybe<String[] | String>;
  cdeunt_not_in?: Maybe<String[] | String>;
  cdeunt_lt?: Maybe<String>;
  cdeunt_lte?: Maybe<String>;
  cdeunt_gt?: Maybe<String>;
  cdeunt_gte?: Maybe<String>;
  cdeunt_contains?: Maybe<String>;
  cdeunt_not_contains?: Maybe<String>;
  cdeunt_starts_with?: Maybe<String>;
  cdeunt_not_starts_with?: Maybe<String>;
  cdeunt_ends_with?: Maybe<String>;
  cdeunt_not_ends_with?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  dtepjc_not?: Maybe<DateTimeInput>;
  dtepjc_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtepjc_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dtepjc_lt?: Maybe<DateTimeInput>;
  dtepjc_lte?: Maybe<DateTimeInput>;
  dtepjc_gt?: Maybe<DateTimeInput>;
  dtepjc_gte?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  libunt_not?: Maybe<String>;
  libunt_in?: Maybe<String[] | String>;
  libunt_not_in?: Maybe<String[] | String>;
  libunt_lt?: Maybe<String>;
  libunt_lte?: Maybe<String>;
  libunt_gt?: Maybe<String>;
  libunt_gte?: Maybe<String>;
  libunt_contains?: Maybe<String>;
  libunt_not_contains?: Maybe<String>;
  libunt_starts_with?: Maybe<String>;
  libunt_not_starts_with?: Maybe<String>;
  libunt_ends_with?: Maybe<String>;
  libunt_not_ends_with?: Maybe<String>;
  typuni?: Maybe<String>;
  typuni_not?: Maybe<String>;
  typuni_in?: Maybe<String[] | String>;
  typuni_not_in?: Maybe<String[] | String>;
  typuni_lt?: Maybe<String>;
  typuni_lte?: Maybe<String>;
  typuni_gt?: Maybe<String>;
  typuni_gte?: Maybe<String>;
  typuni_contains?: Maybe<String>;
  typuni_not_contains?: Maybe<String>;
  typuni_starts_with?: Maybe<String>;
  typuni_not_starts_with?: Maybe<String>;
  typuni_ends_with?: Maybe<String>;
  typuni_not_ends_with?: Maybe<String>;
  AND?: Maybe<UniteScalarWhereInput[] | UniteScalarWhereInput>;
  OR?: Maybe<UniteScalarWhereInput[] | UniteScalarWhereInput>;
  NOT?: Maybe<UniteScalarWhereInput[] | UniteScalarWhereInput>;
}

export interface UniteUpdateManyWithWhereNestedInput {
  where: UniteScalarWhereInput;
  data: UniteUpdateManyDataInput;
}

export interface UniteUpdateManyDataInput {
  cdeunt?: Maybe<String>;
  dtepjc?: Maybe<DateTimeInput>;
  libunt?: Maybe<String>;
  typuni?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  identifiant?: Maybe<String>;
  password?: Maybe<String>;
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface ArticleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleWhereInput>;
  AND?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
}

export interface DetentionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DetentionWhereInput>;
  AND?: Maybe<
    DetentionSubscriptionWhereInput[] | DetentionSubscriptionWhereInput
  >;
}

export interface InventaireSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InventaireWhereInput>;
  AND?: Maybe<
    InventaireSubscriptionWhereInput[] | InventaireSubscriptionWhereInput
  >;
}

export interface UniteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UniteWhereInput>;
  AND?: Maybe<UniteSubscriptionWhereInput[] | UniteSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Article {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  numref: String;
  nno: String;
  lib: String;
  untcpt?: Int;
  untprx?: Float;
  cdeapr?: String;
  srvpou?: String;
  typart?: String;
  numser?: String;
  pictureUrl?: String;
}

export interface ArticlePromise extends Promise<Article>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  numref: () => Promise<String>;
  nno: () => Promise<String>;
  lib: () => Promise<String>;
  untcpt: () => Promise<Int>;
  untprx: () => Promise<Float>;
  cdeapr: () => Promise<String>;
  srvpou: () => Promise<String>;
  typart: () => Promise<String>;
  numser: () => Promise<String>;
  pictureUrl: () => Promise<String>;
  detention: <T = DetentionPromise>() => T;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<Article>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  numref: () => Promise<AsyncIterator<String>>;
  nno: () => Promise<AsyncIterator<String>>;
  lib: () => Promise<AsyncIterator<String>>;
  untcpt: () => Promise<AsyncIterator<Int>>;
  untprx: () => Promise<AsyncIterator<Float>>;
  cdeapr: () => Promise<AsyncIterator<String>>;
  srvpou: () => Promise<AsyncIterator<String>>;
  typart: () => Promise<AsyncIterator<String>>;
  numser: () => Promise<AsyncIterator<String>>;
  pictureUrl: () => Promise<AsyncIterator<String>>;
  detention: <T = DetentionSubscription>() => T;
}

export interface ArticleNullablePromise
  extends Promise<Article | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  numref: () => Promise<String>;
  nno: () => Promise<String>;
  lib: () => Promise<String>;
  untcpt: () => Promise<Int>;
  untprx: () => Promise<Float>;
  cdeapr: () => Promise<String>;
  srvpou: () => Promise<String>;
  typart: () => Promise<String>;
  numser: () => Promise<String>;
  pictureUrl: () => Promise<String>;
  detention: <T = DetentionPromise>() => T;
}

export interface Detention {
  id: ID_Output;
  lib: String;
}

export interface DetentionPromise extends Promise<Detention>, Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
  unite: <T = UnitePromise>() => T;
  inventaires: <T = FragmentableArray<Inventaire>>(args?: {
    where?: InventaireWhereInput;
    orderBy?: InventaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DetentionSubscription
  extends Promise<AsyncIterator<Detention>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lib: () => Promise<AsyncIterator<String>>;
  unite: <T = UniteSubscription>() => T;
  inventaires: <T = Promise<AsyncIterator<InventaireSubscription>>>(args?: {
    where?: InventaireWhereInput;
    orderBy?: InventaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DetentionNullablePromise
  extends Promise<Detention | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
  unite: <T = UnitePromise>() => T;
  inventaires: <T = FragmentableArray<Inventaire>>(args?: {
    where?: InventaireWhereInput;
    orderBy?: InventaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Unite {
  id: ID_Output;
  cdeunt: String;
  dtepjc?: DateTimeOutput;
  libunt: String;
  typuni?: String;
}

export interface UnitePromise extends Promise<Unite>, Fragmentable {
  id: () => Promise<ID_Output>;
  cdeunt: () => Promise<String>;
  dtepjc: () => Promise<DateTimeOutput>;
  libunt: () => Promise<String>;
  typuni: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  detentions: <T = FragmentableArray<Detention>>(args?: {
    where?: DetentionWhereInput;
    orderBy?: DetentionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UniteSubscription
  extends Promise<AsyncIterator<Unite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cdeunt: () => Promise<AsyncIterator<String>>;
  dtepjc: () => Promise<AsyncIterator<DateTimeOutput>>;
  libunt: () => Promise<AsyncIterator<String>>;
  typuni: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  detentions: <T = Promise<AsyncIterator<DetentionSubscription>>>(args?: {
    where?: DetentionWhereInput;
    orderBy?: DetentionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UniteNullablePromise
  extends Promise<Unite | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cdeunt: () => Promise<String>;
  dtepjc: () => Promise<DateTimeOutput>;
  libunt: () => Promise<String>;
  typuni: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  detentions: <T = FragmentableArray<Detention>>(args?: {
    where?: DetentionWhereInput;
    orderBy?: DetentionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  dtecre?: DateTimeOutput;
  identifiant: String;
  password: String;
  nom?: String;
  prenom?: String;
  role?: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  dtecre: () => Promise<DateTimeOutput>;
  identifiant: () => Promise<String>;
  password: () => Promise<String>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  role: () => Promise<UserRole>;
  unites: <T = FragmentableArray<Unite>>(args?: {
    where?: UniteWhereInput;
    orderBy?: UniteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dtecre: () => Promise<AsyncIterator<DateTimeOutput>>;
  identifiant: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  nom: () => Promise<AsyncIterator<String>>;
  prenom: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  unites: <T = Promise<AsyncIterator<UniteSubscription>>>(args?: {
    where?: UniteWhereInput;
    orderBy?: UniteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dtecre: () => Promise<DateTimeOutput>;
  identifiant: () => Promise<String>;
  password: () => Promise<String>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  role: () => Promise<UserRole>;
  unites: <T = FragmentableArray<Unite>>(args?: {
    where?: UniteWhereInput;
    orderBy?: UniteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Inventaire {
  id: ID_Output;
  lib?: String;
  dtever?: DateTimeOutput;
  exideb?: String;
  dtecre?: DateTimeOutput;
  cdevrf?: String;
  obs?: String;
  articles?: <T = FragmentableArray<ArticleEmbedded>>() => T;
}

export interface InventairePromise extends Promise<Inventaire>, Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
  dtever: () => Promise<DateTimeOutput>;
  exideb: () => Promise<String>;
  dtecre: () => Promise<DateTimeOutput>;
  cdevrf: () => Promise<String>;
  obs: () => Promise<String>;
  articles: <T = FragmentableArray<ArticleEmbedded>>() => T;
  detention: <T = DetentionPromise>() => T;
}

export interface InventaireSubscription
  extends Promise<AsyncIterator<Inventaire>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lib: () => Promise<AsyncIterator<String>>;
  dtever: () => Promise<AsyncIterator<DateTimeOutput>>;
  exideb: () => Promise<AsyncIterator<String>>;
  dtecre: () => Promise<AsyncIterator<DateTimeOutput>>;
  cdevrf: () => Promise<AsyncIterator<String>>;
  obs: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleEmbeddedSubscription>>>() => T;
  detention: <T = DetentionSubscription>() => T;
}

export interface InventaireNullablePromise
  extends Promise<Inventaire | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
  dtever: () => Promise<DateTimeOutput>;
  exideb: () => Promise<String>;
  dtecre: () => Promise<DateTimeOutput>;
  cdevrf: () => Promise<String>;
  obs: () => Promise<String>;
  articles: <T = FragmentableArray<ArticleEmbedded>>() => T;
  detention: <T = DetentionPromise>() => T;
}

export interface ArticleEmbedded {
  article_id: ID_Output;
  nno: String;
  numref: String;
  lib: String;
  untcpt?: Int;
  untprx?: Float;
  cdeapr?: String;
  srvpou?: String;
  typart?: String;
  numser?: String;
  pictureUrl?: String;
}

export interface ArticleEmbeddedPromise
  extends Promise<ArticleEmbedded>,
    Fragmentable {
  article_id: () => Promise<ID_Output>;
  nno: () => Promise<String>;
  numref: () => Promise<String>;
  lib: () => Promise<String>;
  untcpt: () => Promise<Int>;
  untprx: () => Promise<Float>;
  cdeapr: () => Promise<String>;
  srvpou: () => Promise<String>;
  typart: () => Promise<String>;
  numser: () => Promise<String>;
  pictureUrl: () => Promise<String>;
  detention: <T = DetentionPromise>() => T;
}

export interface ArticleEmbeddedSubscription
  extends Promise<AsyncIterator<ArticleEmbedded>>,
    Fragmentable {
  article_id: () => Promise<AsyncIterator<ID_Output>>;
  nno: () => Promise<AsyncIterator<String>>;
  numref: () => Promise<AsyncIterator<String>>;
  lib: () => Promise<AsyncIterator<String>>;
  untcpt: () => Promise<AsyncIterator<Int>>;
  untprx: () => Promise<AsyncIterator<Float>>;
  cdeapr: () => Promise<AsyncIterator<String>>;
  srvpou: () => Promise<AsyncIterator<String>>;
  typart: () => Promise<AsyncIterator<String>>;
  numser: () => Promise<AsyncIterator<String>>;
  pictureUrl: () => Promise<AsyncIterator<String>>;
  detention: <T = DetentionSubscription>() => T;
}

export interface ArticleEmbeddedNullablePromise
  extends Promise<ArticleEmbedded | null>,
    Fragmentable {
  article_id: () => Promise<ID_Output>;
  nno: () => Promise<String>;
  numref: () => Promise<String>;
  lib: () => Promise<String>;
  untcpt: () => Promise<Int>;
  untprx: () => Promise<Float>;
  cdeapr: () => Promise<String>;
  srvpou: () => Promise<String>;
  typart: () => Promise<String>;
  numser: () => Promise<String>;
  pictureUrl: () => Promise<String>;
  detention: <T = DetentionPromise>() => T;
}

export interface ArticleConnection {
  pageInfo: PageInfo;
  edges: ArticleEdge[];
}

export interface ArticleConnectionPromise
  extends Promise<ArticleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEdge>>() => T;
  aggregate: <T = AggregateArticlePromise>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleEdge {
  node: Article;
  cursor: String;
}

export interface ArticleEdgePromise extends Promise<ArticleEdge>, Fragmentable {
  node: <T = ArticlePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdge>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArticle {
  count: Int;
}

export interface AggregateArticlePromise
  extends Promise<AggregateArticle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DetentionConnection {
  pageInfo: PageInfo;
  edges: DetentionEdge[];
}

export interface DetentionConnectionPromise
  extends Promise<DetentionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DetentionEdge>>() => T;
  aggregate: <T = AggregateDetentionPromise>() => T;
}

export interface DetentionConnectionSubscription
  extends Promise<AsyncIterator<DetentionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DetentionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDetentionSubscription>() => T;
}

export interface DetentionEdge {
  node: Detention;
  cursor: String;
}

export interface DetentionEdgePromise
  extends Promise<DetentionEdge>,
    Fragmentable {
  node: <T = DetentionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DetentionEdgeSubscription
  extends Promise<AsyncIterator<DetentionEdge>>,
    Fragmentable {
  node: <T = DetentionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDetention {
  count: Int;
}

export interface AggregateDetentionPromise
  extends Promise<AggregateDetention>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDetentionSubscription
  extends Promise<AsyncIterator<AggregateDetention>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InventaireConnection {
  pageInfo: PageInfo;
  edges: InventaireEdge[];
}

export interface InventaireConnectionPromise
  extends Promise<InventaireConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventaireEdge>>() => T;
  aggregate: <T = AggregateInventairePromise>() => T;
}

export interface InventaireConnectionSubscription
  extends Promise<AsyncIterator<InventaireConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventaireEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventaireSubscription>() => T;
}

export interface InventaireEdge {
  node: Inventaire;
  cursor: String;
}

export interface InventaireEdgePromise
  extends Promise<InventaireEdge>,
    Fragmentable {
  node: <T = InventairePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventaireEdgeSubscription
  extends Promise<AsyncIterator<InventaireEdge>>,
    Fragmentable {
  node: <T = InventaireSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInventaire {
  count: Int;
}

export interface AggregateInventairePromise
  extends Promise<AggregateInventaire>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventaireSubscription
  extends Promise<AsyncIterator<AggregateInventaire>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UniteConnection {
  pageInfo: PageInfo;
  edges: UniteEdge[];
}

export interface UniteConnectionPromise
  extends Promise<UniteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UniteEdge>>() => T;
  aggregate: <T = AggregateUnitePromise>() => T;
}

export interface UniteConnectionSubscription
  extends Promise<AsyncIterator<UniteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UniteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUniteSubscription>() => T;
}

export interface UniteEdge {
  node: Unite;
  cursor: String;
}

export interface UniteEdgePromise extends Promise<UniteEdge>, Fragmentable {
  node: <T = UnitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UniteEdgeSubscription
  extends Promise<AsyncIterator<UniteEdge>>,
    Fragmentable {
  node: <T = UniteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUnite {
  count: Int;
}

export interface AggregateUnitePromise
  extends Promise<AggregateUnite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUniteSubscription
  extends Promise<AsyncIterator<AggregateUnite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType;
  node: Article;
  updatedFields: String[];
  previousValues: ArticlePreviousValues;
}

export interface ArticleSubscriptionPayloadPromise
  extends Promise<ArticleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticlePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValuesPromise>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface ArticlePreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  numref: String;
  nno: String;
  lib: String;
  untcpt?: Int;
  untprx?: Float;
  cdeapr?: String;
  srvpou?: String;
  typart?: String;
  numser?: String;
  pictureUrl?: String;
}

export interface ArticlePreviousValuesPromise
  extends Promise<ArticlePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  numref: () => Promise<String>;
  nno: () => Promise<String>;
  lib: () => Promise<String>;
  untcpt: () => Promise<Int>;
  untprx: () => Promise<Float>;
  cdeapr: () => Promise<String>;
  srvpou: () => Promise<String>;
  typart: () => Promise<String>;
  numser: () => Promise<String>;
  pictureUrl: () => Promise<String>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  numref: () => Promise<AsyncIterator<String>>;
  nno: () => Promise<AsyncIterator<String>>;
  lib: () => Promise<AsyncIterator<String>>;
  untcpt: () => Promise<AsyncIterator<Int>>;
  untprx: () => Promise<AsyncIterator<Float>>;
  cdeapr: () => Promise<AsyncIterator<String>>;
  srvpou: () => Promise<AsyncIterator<String>>;
  typart: () => Promise<AsyncIterator<String>>;
  numser: () => Promise<AsyncIterator<String>>;
  pictureUrl: () => Promise<AsyncIterator<String>>;
}

export interface DetentionSubscriptionPayload {
  mutation: MutationType;
  node: Detention;
  updatedFields: String[];
  previousValues: DetentionPreviousValues;
}

export interface DetentionSubscriptionPayloadPromise
  extends Promise<DetentionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DetentionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DetentionPreviousValuesPromise>() => T;
}

export interface DetentionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DetentionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DetentionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DetentionPreviousValuesSubscription>() => T;
}

export interface DetentionPreviousValues {
  id: ID_Output;
  lib: String;
}

export interface DetentionPreviousValuesPromise
  extends Promise<DetentionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
}

export interface DetentionPreviousValuesSubscription
  extends Promise<AsyncIterator<DetentionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lib: () => Promise<AsyncIterator<String>>;
}

export interface InventaireSubscriptionPayload {
  mutation: MutationType;
  node: Inventaire;
  updatedFields: String[];
  previousValues: InventairePreviousValues;
}

export interface InventaireSubscriptionPayloadPromise
  extends Promise<InventaireSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventairePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventairePreviousValuesPromise>() => T;
}

export interface InventaireSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventaireSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventaireSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventairePreviousValuesSubscription>() => T;
}

export interface InventairePreviousValues {
  id: ID_Output;
  lib?: String;
  dtever?: DateTimeOutput;
  exideb?: String;
  dtecre?: DateTimeOutput;
  cdevrf?: String;
  obs?: String;
}

export interface InventairePreviousValuesPromise
  extends Promise<InventairePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lib: () => Promise<String>;
  dtever: () => Promise<DateTimeOutput>;
  exideb: () => Promise<String>;
  dtecre: () => Promise<DateTimeOutput>;
  cdevrf: () => Promise<String>;
  obs: () => Promise<String>;
}

export interface InventairePreviousValuesSubscription
  extends Promise<AsyncIterator<InventairePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lib: () => Promise<AsyncIterator<String>>;
  dtever: () => Promise<AsyncIterator<DateTimeOutput>>;
  exideb: () => Promise<AsyncIterator<String>>;
  dtecre: () => Promise<AsyncIterator<DateTimeOutput>>;
  cdevrf: () => Promise<AsyncIterator<String>>;
  obs: () => Promise<AsyncIterator<String>>;
}

export interface UniteSubscriptionPayload {
  mutation: MutationType;
  node: Unite;
  updatedFields: String[];
  previousValues: UnitePreviousValues;
}

export interface UniteSubscriptionPayloadPromise
  extends Promise<UniteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UnitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UnitePreviousValuesPromise>() => T;
}

export interface UniteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UniteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UniteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UnitePreviousValuesSubscription>() => T;
}

export interface UnitePreviousValues {
  id: ID_Output;
  cdeunt: String;
  dtepjc?: DateTimeOutput;
  libunt: String;
  typuni?: String;
}

export interface UnitePreviousValuesPromise
  extends Promise<UnitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cdeunt: () => Promise<String>;
  dtepjc: () => Promise<DateTimeOutput>;
  libunt: () => Promise<String>;
  typuni: () => Promise<String>;
}

export interface UnitePreviousValuesSubscription
  extends Promise<AsyncIterator<UnitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cdeunt: () => Promise<AsyncIterator<String>>;
  dtepjc: () => Promise<AsyncIterator<DateTimeOutput>>;
  libunt: () => Promise<AsyncIterator<String>>;
  typuni: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  dtecre?: DateTimeOutput;
  identifiant: String;
  password: String;
  nom?: String;
  prenom?: String;
  role?: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dtecre: () => Promise<DateTimeOutput>;
  identifiant: () => Promise<String>;
  password: () => Promise<String>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dtecre: () => Promise<AsyncIterator<DateTimeOutput>>;
  identifiant: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  nom: () => Promise<AsyncIterator<String>>;
  prenom: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Article",
    embedded: false
  },
  {
    name: "ArticleEmbedded",
    embedded: true
  },
  {
    name: "Unite",
    embedded: false
  },
  {
    name: "Inventaire",
    embedded: false
  },
  {
    name: "Detention",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
